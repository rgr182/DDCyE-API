trigger:
  branches:
    include:
      - main

pool:
  name: 'Self-Hosted Pool'  # Nombre del pool que creaste para el agente autohospedado

steps:
# Instalar el SDK de .NET Core
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restaurar dependencias
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Compilar la solución
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

# Publicar la aplicación en un directorio temporal para desplegar
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# Copiar los archivos al servidor remoto usando SSH
- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'SSH Devops'  # Cambiado al nuevo servicio SSH en Azure DevOps
    sourceFolder: '$(Build.ArtifactStagingDirectory)'  # Directorio donde se publicaron los archivos
    targetFolder: 'C:/inetpub/WebAPI'  # Ruta en el servidor remoto para IIS
    cleanTargetFolder: false

# Ejecutar comandos SSH en el servidor remoto para reiniciar IIS
- task: SSH@0
  inputs:
    sshEndpoint: 'SSH Devops'  # Cambiado al nuevo servicio SSH en Azure DevOps
    runOptions: 'inline'
    inline: |
      iisreset  # Comando para reiniciar IIS en el servidor Windows
    failOnStdErr: true
