trigger:
  branches:
    include:
      - main

pool:
  name: 'Self-Hosted Pool'

variables:
- group: DeploymentCredentials  # Links to the variable group you created

steps:
# Install .NET Core SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore dependencies for the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'

# Build the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    arguments: '--configuration Release'

# Publish the DDEyC_API project to a temporary directory for deployment
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# Copy the published files to the remote server using PowerShell
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"
      $source = "$(Build.ArtifactStagingDirectory)\*"
      $destination = "\\158.222.102.253\C$\inetpub\WebAPI"
      $username = "$(Username)"
      $password = ConvertTo-SecureString "$(Password)" -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential($username, $password)
      
      try {
        Write-Host "Creating PSDrive..."
        New-PSDrive -Name RemoteServer -PSProvider FileSystem -Root $destination -Credential $credential -ErrorAction Stop
        
        Write-Host "Copying files..."
        Copy-Item -Path $source -Destination "RemoteServer:" -Recurse -Force
        
        Write-Host "Files copied successfully."
      }
      catch {
        Write-Error "An error occurred: $_"
        throw
      }
      finally {
        if (Get-PSDrive -Name RemoteServer -ErrorAction SilentlyContinue) {
          Remove-PSDrive -Name RemoteServer
          Write-Host "PSDrive removed."
        }
      }

# Restart IIS on the remote server using PowerShell
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"
      $username = "$(Username)"
      $password = ConvertTo-SecureString "$(Password)" -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential($username, $password)
      
      try {
        Write-Host "Attempting to restart IIS..."
        Invoke-Command -ComputerName "158.222.102.253" -ScriptBlock {
          Import-Module WebAdministration
          $result = iisreset
          if ($LASTEXITCODE -ne 0) {
            throw "IISReset failed with exit code $LASTEXITCODE. Output: $result"
          }
          Write-Host $result
        } -Credential $credential -ErrorAction Stop
        
        Write-Host "IIS restarted successfully."
      }
      catch {
        Write-Error "An error occurred while restarting IIS: $_"
        throw
      }