trigger:
  branches:
    include:
      - main

pool:
  name: 'Self-Hosted Pool'

variables:
- group: DeploymentCredentials  # Links to the variable group you created

steps:
# Install .NET Core SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore dependencies for the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'

# Build the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    arguments: '--configuration Release'

# Publish the DDEyC_API project to a temporary directory for deployment
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false

- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'SSH Devops'
    sourceFolder: '$(Build.ArtifactStagingDirectory)'
    targetFolder: 'C:/inetpub/WebAPI'
    cleanTargetFolder: false


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $username = "$(Username)"
      $password = "$(Password)"

      Write-Host "Attempting to restart IIS using provided credentials..."
      try {
        $startInfo = New-Object System.Diagnostics.ProcessStartInfo
        $startInfo.FileName = "cmd.exe"
        $startInfo.Arguments = "/c iisreset"
        $startInfo.Domain = $env:COMPUTERNAME
        $startInfo.UserName = $username
        $startInfo.Password = ConvertTo-SecureString $password -AsPlainText -Force
        $startInfo.UseShellExecute = $false
        $startInfo.RedirectStandardOutput = $true
        $startInfo.RedirectStandardError = $true

        $process = New-Object System.Diagnostics.Process
        $process.StartInfo = $startInfo
        $process.Start() | Out-Null
        $output = $process.StandardOutput.ReadToEnd()
        $error_output = $process.StandardError.ReadToEnd()
        $process.WaitForExit()

        Write-Host "Standard Output:"
        Write-Host $output
        
        if ($error_output) {
          Write-Host "Error Output:"
          Write-Host $error_output
        }

        if ($process.ExitCode -eq 0) {
          Write-Host "IIS restarted successfully."
        } else {
          throw "IIS reset failed with exit code $($process.ExitCode)"
        }
      }
      catch {
        Write-Error "An error occurred while restarting IIS: $_"
        throw
      }