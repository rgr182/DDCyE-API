trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

steps:
# Instalar el SDK de .NET Core
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restaurar dependencias
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Compilar la solución
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

# Publicar la aplicación en un directorio temporal para desplegar
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# Copiar los archivos al servidor remoto usando SSH
- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'SSH_Connection'  # Nombre del servicio de conexión SSH configurado en DevOps
    sourceFolder: '$(Build.ArtifactStagingDirectory)'  # Directorio donde se publicaron los archivos
    targetFolder: '/var/www/app'  # Ruta en el servidor remoto (ajústalo según tu entorno)
    cleanTargetFolder: false

# Ejecutar comandos SSH en el servidor remoto (opcional)
- task: SSH@0
  inputs:
    sshEndpoint: 'SSH_Connection'  # Nombre del servicio de conexión SSH configurado en DevOps
    runOptions: 'inline'
    inline: |
      sudo systemctl restart apache2  # Reemplaza según el servidor (por ejemplo, IIS en Windows o Apache en Linux)
    failOnStdErr: true
