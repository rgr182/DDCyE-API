trigger:
  branches:
    include:
      - main

# El pool de agentes es predeterminado. Si no necesitas una VM específica, Azure DevOps usará su agente por defecto.
pool:
  vmImage: 'windows-latest'  # Esto usa un agente de Windows en la nube para la compilación, no es necesario para el servidor.

steps:
# Instalar el SDK de .NET Core
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restaurar dependencias
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Compilar la solución
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

# Publicar la aplicación en un directorio temporal para desplegar
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# Copiar los archivos generados al servidor Windows remoto
- task: WindowsMachineFileCopy@3
  inputs:
    SourcePath: '$(Build.ArtifactStagingDirectory)'  # Directorio donde se publicaron los archivos
    MachineName: '158.222.102.253'  # IP del servidor Windows remoto
    AdminUserName: 'Administrator'  # Usuario administrador
    AdminPassword: '$(adminPassword)'  # Contraseña (almacenada de forma segura)
    TargetPath: 'C:\\inetpub\\wwwroot'  # Ruta donde se copiarán los archivos en el servidor

# Comando opcional para reiniciar IIS después del despliegue
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Restart-WebAppPool -Name "DefaultAppPool"'
    errorActionPreference: 'Stop'
