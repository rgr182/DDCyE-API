trigger:
  branches:
    include:
      - main

pool:
  name: 'Self-Hosted Pool'

variables:
- group: DeploymentCredentials  # Links to the variable group you created

steps:
# Install .NET Core SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore dependencies for the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'

# Build the DDEyC_API project only
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    arguments: '--configuration Release'

# Publish the DDEyC_API project to a temporary directory for deployment
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '$(Build.SourcesDirectory)/DDEyC_API/DDEyC_API.csproj'
    publishWebProjects: true
    arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false

- task: CopyFilesOverSSH@0
  inputs:
    sshEndpoint: 'SSH Devops'
    sourceFolder: '$(Build.ArtifactStagingDirectory)'
    targetFolder: 'C:/inetpub/WebAPI'
    cleanTargetFolder: false


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Stop"
      $username = "$(Username)"
      $password = "$(Password)"
      $siteName = "DDEyC_API"

      Write-Host "Attempting to restart IIS site: $siteName"
      try {
        $scriptBlock = {
          param($siteName)
          Import-Module WebAdministration
          $site = Get-Website -Name $siteName
          if ($site) {
            Write-Host "Site found. Current state: $($site.State)"
            if ($site.State -eq "Started") {
              Write-Host "Stopping site..."
              Stop-Website -Name $siteName
              Start-Sleep -Seconds 5
            }
            Write-Host "Starting site..."
            Start-Website -Name $siteName
            Start-Sleep -Seconds 5
            $site = Get-Website -Name $siteName
            Write-Host "Site state after restart attempt: $($site.State)"
            if ($site.State -eq "Started") {
              Write-Host "Site successfully restarted."
            } else {
              throw "Site is not in 'Started' state after restart attempt."
            }
          } else {
            throw "Site '$siteName' not found."
          }
        }

        $result = Invoke-Command -ComputerName localhost -Credential (New-Object System.Management.Automation.PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force))) -ScriptBlock $scriptBlock -ArgumentList $siteName

        Write-Host "Command output:"
        Write-Host $result
      }
      catch {
        Write-Host "An error occurred:"
        Write-Host "Exception type: $($_.Exception.GetType().FullName)"
        Write-Host "Exception message: $($_.Exception.Message)"
        Write-Host "Stack trace: $($_.ScriptStackTrace)"
        throw
      }